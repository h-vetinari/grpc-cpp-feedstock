From 2abb633b0bc3413ff2be6585c8ff3929acf62777 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Sat, 22 Oct 2022 01:21:56 -0500
Subject: [PATCH 8/9] add {GRPC,GRPCXX,UBP}_DLL mechanism for missing symbols
 on windows

Co-Authored-By: "H. Vetinari" <h.vetinari@gmx.com>
---
 CMakeLists.txt                                | 26 +++++++++++++++++
 include/grpc/impl/codegen/port_platform.h     | 28 +++++++++++++++++++
 .../src/proto/grpc/health/v1/health.upb.c     |  4 +--
 .../src/proto/grpc/health/v1/health.upb.h     |  4 +--
 .../xds/data/orca/v3/orca_load_report.upb.c   |  2 +-
 .../xds/data/orca/v3/orca_load_report.upb.h   |  2 +-
 src/core/lib/gprpp/fork.h                     |  2 +-
 src/core/lib/iomgr/exec_ctx.h                 |  4 +--
 third_party/upb/upb/arena.c                   |  2 +-
 third_party/upb/upb/arena.h                   |  2 +-
 third_party/upb/upb/port_def.inc              | 27 ++++++++++++++++++
 11 files changed, 92 insertions(+), 11 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c42d5dd122..5dfdebc64c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2376,6 +2376,11 @@ if(WIN32 AND MSVC)
   set_target_properties(grpc PROPERTIES COMPILE_PDB_NAME "grpc"
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
+  # More details in include/grpc/impl/codegen/port_platform.h
+  set_target_properties(grpc PROPERTIES DEFINE_SYMBOL "gRPC_DLL_EXPORTS")
+  if(BUILD_SHARED_LIBS)
+    target_compile_definitions(grpc INTERFACE gRPC_DLL_IMPORTS)
+  endif()
   if(gRPC_INSTALL)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
@@ -2924,6 +2929,11 @@ if(WIN32 AND MSVC)
   set_target_properties(grpc_unsecure PROPERTIES COMPILE_PDB_NAME "grpc_unsecure"
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
+  # More details in include/grpc/impl/codegen/port_platform.h
+  set_target_properties(grpc_unsecure PROPERTIES DEFINE_SYMBOL "gRPC_DLL_EXPORTS")
+  if(BUILD_SHARED_LIBS)
+    target_compile_definitions(grpc_unsecure INTERFACE gRPC_DLL_IMPORTS)
+  endif()
   if(gRPC_INSTALL)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
@@ -3187,6 +3197,11 @@ if(WIN32 AND MSVC)
   set_target_properties(grpc++ PROPERTIES COMPILE_PDB_NAME "grpc++"
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
+  # More details in include/grpc/impl/codegen/port_platform.h
+  set_target_properties(grpc++ PROPERTIES DEFINE_SYMBOL "gRPCXX_DLL_EXPORTS")
+  if(BUILD_SHARED_LIBS)
+    target_compile_definitions(grpc++ INTERFACE gRPCXX_DLL_IMPORTS)
+  endif()
   if(gRPC_INSTALL)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
@@ -3861,6 +3876,11 @@ if(WIN32 AND MSVC)
   set_target_properties(grpc++_unsecure PROPERTIES COMPILE_PDB_NAME "grpc++_unsecure"
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
+  # More details in include/grpc/impl/codegen/port_platform.h
+  set_target_properties(grpc++_unsecure PROPERTIES DEFINE_SYMBOL "gRPCXX_DLL_EXPORTS")
+  if(BUILD_SHARED_LIBS)
+    target_compile_definitions(grpc++_unsecure INTERFACE gRPCXX_DLL_IMPORTS)
+  endif()
   if(gRPC_INSTALL)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
@@ -4274,6 +4294,12 @@ if(WIN32 AND MSVC)
   set_target_properties(upb PROPERTIES COMPILE_PDB_NAME "upb"
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
+  # More details in third_party/upb/upb/port_def.inc;
+  # needs to be separate from gRPC_DLL_{IM,EX}PORTS
+  set_target_properties(upb PROPERTIES DEFINE_SYMBOL "UPB_DLL_EXPORTS")
+  if(BUILD_SHARED_LIBS)
+    target_compile_definitions(upb INTERFACE UPB_DLL_IMPORTS)
+  endif()
   if(gRPC_INSTALL)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
diff --git a/include/grpc/impl/codegen/port_platform.h b/include/grpc/impl/codegen/port_platform.h
index ec8217a345..a1363f70da 100644
--- a/include/grpc/impl/codegen/port_platform.h
+++ b/include/grpc/impl/codegen/port_platform.h
@@ -81,6 +81,34 @@
 #undef GRPC_NOMINMAX_WAS_NOT_DEFINED
 #undef NOMINMAX
 #endif /* GRPC_WIN32_LEAN_AND_MEAN_WAS_NOT_DEFINED */
+
+// GPRC_DLL
+// inspired by https://github.com/abseil/abseil-cpp/blob/20220623.1/absl/base/config.h#L730-L747
+//
+// When building gRPC as a DLL, this macro expands to `__declspec(dllexport)`
+// so we can annotate symbols appropriately as being exported. When used in
+// headers consuming a DLL, this macro expands to `__declspec(dllimport)` so
+// that consumers know the symbol is defined inside the DLL. In all other cases,
+// the macro expands to nothing.
+// Note: gRPC_DLL_EXPORTS is set in CMakeLists.txt when building shared grpc{,_unsecure}
+//       gRPC_DLL_IMPORTS is set by us as part of the interface for consumers of the DLL
+#if defined(gRPC_DLL_EXPORTS)
+#define GRPC_DLL __declspec(dllexport)
+#elif defined(gRPC_DLL_IMPORTS)
+#define GRPC_DLL __declspec(dllimport)
+#else
+#define GRPC_DLL
+#endif // defined(gRPC_DLL_EXPORTS)
+
+// same for gRPC++
+#if defined(gRPCXX_DLL_EXPORTS)
+#define GRPCXX_DLL __declspec(dllexport)
+#elif defined(gRPCXX_DLL_IMPORTS)
+#define GRPCXX_DLL __declspec(dllimport)
+#else
+#define GRPCXX_DLL
+#endif // defined(gRPCXX_DLL_EXPORTS)
+
 #endif /* defined(_WIN64) || defined(WIN64) || defined(_WIN32) || \
           defined(WIN32) */
 
diff --git a/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.c b/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.c
index 76ea0a5008..7e86851b4c 100644
--- a/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.c
+++ b/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.c
@@ -16,7 +16,7 @@ static const upb_MiniTable_Field grpc_health_v1_HealthCheckRequest__fields[1] =
   {1, UPB_SIZE(0, 0), UPB_SIZE(0, 0), kUpb_NoSub, 9, kUpb_FieldMode_Scalar | (kUpb_FieldRep_StringView << kUpb_FieldRep_Shift)},
 };
 
-const upb_MiniTable grpc_health_v1_HealthCheckRequest_msginit = {
+const GRPCXX_DLL upb_MiniTable grpc_health_v1_HealthCheckRequest_msginit = {
   NULL,
   &grpc_health_v1_HealthCheckRequest__fields[0],
   UPB_SIZE(8, 16), 1, kUpb_ExtMode_NonExtendable, 1, 255, 0,
@@ -26,7 +26,7 @@ static const upb_MiniTable_Field grpc_health_v1_HealthCheckResponse__fields[1] =
   {1, UPB_SIZE(0, 0), UPB_SIZE(0, 0), kUpb_NoSub, 5, kUpb_FieldMode_Scalar | (kUpb_FieldRep_4Byte << kUpb_FieldRep_Shift)},
 };
 
-const upb_MiniTable grpc_health_v1_HealthCheckResponse_msginit = {
+const GRPCXX_DLL upb_MiniTable grpc_health_v1_HealthCheckResponse_msginit = {
   NULL,
   &grpc_health_v1_HealthCheckResponse__fields[0],
   UPB_SIZE(8, 8), 1, kUpb_ExtMode_NonExtendable, 1, 255, 0,
diff --git a/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.h b/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.h
index 74f2df4458..c6c6dc7a4e 100644
--- a/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.h
+++ b/src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.h
@@ -24,8 +24,8 @@ struct grpc_health_v1_HealthCheckRequest;
 struct grpc_health_v1_HealthCheckResponse;
 typedef struct grpc_health_v1_HealthCheckRequest grpc_health_v1_HealthCheckRequest;
 typedef struct grpc_health_v1_HealthCheckResponse grpc_health_v1_HealthCheckResponse;
-extern const upb_MiniTable grpc_health_v1_HealthCheckRequest_msginit;
-extern const upb_MiniTable grpc_health_v1_HealthCheckResponse_msginit;
+extern const GRPCXX_DLL upb_MiniTable grpc_health_v1_HealthCheckRequest_msginit;
+extern const GRPCXX_DLL upb_MiniTable grpc_health_v1_HealthCheckResponse_msginit;
 
 typedef enum {
   grpc_health_v1_HealthCheckResponse_UNKNOWN = 0,
diff --git a/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.c b/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.c
index 8607c6219a..8a06afa8c5 100644
--- a/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.c
+++ b/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.c
@@ -26,7 +26,7 @@ static const upb_MiniTable_Field xds_data_orca_v3_OrcaLoadReport__fields[5] = {
   {5, UPB_SIZE(4, 8), UPB_SIZE(0, 0), 1, 11, kUpb_FieldMode_Map | (kUpb_FieldRep_Pointer << kUpb_FieldRep_Shift)},
 };
 
-const upb_MiniTable xds_data_orca_v3_OrcaLoadReport_msginit = {
+const GRPCXX_DLL upb_MiniTable xds_data_orca_v3_OrcaLoadReport_msginit = {
   &xds_data_orca_v3_OrcaLoadReport_submsgs[0],
   &xds_data_orca_v3_OrcaLoadReport__fields[0],
   UPB_SIZE(32, 40), 5, kUpb_ExtMode_NonExtendable, 5, 255, 0,
diff --git a/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.h b/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.h
index 7ad025fe4f..7e267e35d9 100644
--- a/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.h
+++ b/src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.h
@@ -26,7 +26,7 @@ struct xds_data_orca_v3_OrcaLoadReport_UtilizationEntry;
 typedef struct xds_data_orca_v3_OrcaLoadReport xds_data_orca_v3_OrcaLoadReport;
 typedef struct xds_data_orca_v3_OrcaLoadReport_RequestCostEntry xds_data_orca_v3_OrcaLoadReport_RequestCostEntry;
 typedef struct xds_data_orca_v3_OrcaLoadReport_UtilizationEntry xds_data_orca_v3_OrcaLoadReport_UtilizationEntry;
-extern const upb_MiniTable xds_data_orca_v3_OrcaLoadReport_msginit;
+extern const GRPCXX_DLL upb_MiniTable xds_data_orca_v3_OrcaLoadReport_msginit;
 extern const upb_MiniTable xds_data_orca_v3_OrcaLoadReport_RequestCostEntry_msginit;
 extern const upb_MiniTable xds_data_orca_v3_OrcaLoadReport_UtilizationEntry_msginit;
 
diff --git a/src/core/lib/gprpp/fork.h b/src/core/lib/gprpp/fork.h
index 599176a741..1dffa2b659 100644
--- a/src/core/lib/gprpp/fork.h
+++ b/src/core/lib/gprpp/fork.h
@@ -30,7 +30,7 @@
 
 namespace grpc_core {
 
-class Fork {
+class GRPC_DLL Fork {
  public:
   typedef void (*child_postfork_func)(void);
 
diff --git a/src/core/lib/iomgr/exec_ctx.h b/src/core/lib/iomgr/exec_ctx.h
index 08aeb23083..b02af2dd02 100644
--- a/src/core/lib/iomgr/exec_ctx.h
+++ b/src/core/lib/iomgr/exec_ctx.h
@@ -94,7 +94,7 @@ class Combiner;
  *                since that implies a core re-entry outside of application
  *                callbacks.
  */
-class ExecCtx {
+class GRPCXX_DLL ExecCtx {
  public:
   /** Default Constructor */
 
@@ -262,7 +262,7 @@ class ExecCtx {
  *
  */
 
-class ApplicationCallbackExecCtx {
+class GRPCXX_DLL ApplicationCallbackExecCtx {
  public:
   /** Default Constructor */
   ApplicationCallbackExecCtx() { Set(this, flags_); }
diff --git a/third_party/upb/upb/arena.c b/third_party/upb/upb/arena.c
index 3c872698cd..fd3106cb50 100644
--- a/third_party/upb/upb/arena.c
+++ b/third_party/upb/upb/arena.c
@@ -61,7 +61,7 @@ static uintptr_t upb_cleanup_metadata(uint32_t* cleanup,
   return (uintptr_t)cleanup | has_initial_block;
 }
 
-upb_alloc upb_alloc_global = {&upb_global_allocfunc};
+UPB_DLL upb_alloc upb_alloc_global = {&upb_global_allocfunc};
 
 /* upb_Arena ******************************************************************/
 
diff --git a/third_party/upb/upb/arena.h b/third_party/upb/upb/arena.h
index 0c4fd1b83c..c0b3051675 100644
--- a/third_party/upb/upb/arena.h
+++ b/third_party/upb/upb/arena.h
@@ -78,7 +78,7 @@ UPB_INLINE void upb_free(upb_alloc* alloc, void* ptr) {
 
 /* The global allocator used by upb.  Uses the standard malloc()/free(). */
 
-extern upb_alloc upb_alloc_global;
+extern UPB_DLL upb_alloc upb_alloc_global;
 
 /* Functions that hard-code the global malloc.
  *
diff --git a/third_party/upb/upb/port_def.inc b/third_party/upb/upb/port_def.inc
index 92e4bf2477..4db1d404c6 100644
--- a/third_party/upb/upb/port_def.inc
+++ b/third_party/upb/upb/port_def.inc
@@ -260,3 +260,30 @@ void __asan_unpoison_memory_region(void const volatile *addr, size_t size);
 #else
 #define UPB_TREAT_PROTO2_ENUMS_LIKE_PROTO3 0
 #endif
+
+// UPB_DLL
+// inspired by https://github.com/abseil/abseil-cpp/blob/20220623.1/absl/base/config.h#L730-L747
+//
+// When building upb as a DLL, this macro expands to `__declspec(dllexport)`
+// so we can annotate symbols appropriately as being exported. When used in
+// headers consuming a DLL, this macro expands to `__declspec(dllimport)` so
+// that consumers know the symbol is defined inside the DLL. In all other cases,
+// the macro expands to nothing.
+// Note: UPB_DLL_EXPORTS is set in CMakeLists.txt when building shared upb
+//       UPB_DLL_IMPORTS is set by us as part of the interface for consumers of the DLL
+#if defined(UPB_DLL_EXPORTS)
+#define UPB_DLL __declspec(dllexport)
+#elif defined(UPB_DLL_IMPORTS)
+#define UPB_DLL __declspec(dllimport)
+#else
+#define UPB_DLL
+#endif // defined(UPB_DLL_EXPORTS)
+
+// same for gRPC++
+#if defined(gRPCXX_DLL_EXPORTS)
+#define GRPCXX_DLL __declspec(dllexport)
+#elif defined(gRPCXX_DLL_IMPORTS)
+#define GRPCXX_DLL __declspec(dllimport)
+#else
+#define GRPCXX_DLL
+#endif // defined(gRPCXX_DLL_EXPORTS)
-- 
2.38.1.windows.1

